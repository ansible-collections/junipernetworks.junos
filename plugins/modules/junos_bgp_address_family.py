#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for junos_bgp_address_family
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: junos_bgp_address_family
version_added: 1.2.3
short_description: Manage BGP Address Family attributes of interfaces on Junos devices.
description: Manage BGP Address Family attributes of interfaces on Junos network devices.
author: Rohit Thakur (@rohitthakur2590)
requirements:
  - ncclient (>=v0.6.4)
  - xmltodict (>=0.12.0)
notes:
  - This module requires the netconf system service be enabled on the device being managed.
  - This module works with connection C(netconf). See L(the Junos OS Platform Options,../network/user_guide/platform_junos.html).
  - Tested against JunOS v18.4R1
options:
  running_config:
    description:
      - This option is used only with state I(parsed).
      - The value of this option should be the output received from the Junos device
        by executing the command B(show protocols bgp family).
      - The state I(parsed) reads the configuration from C(running_config) option and
        transforms it into Ansible structured data as per the resource module's argspec
        and the value is then returned in the I(parsed) key within the result
    type: str
  config:
    description: The provided link BGP address family dictionary.
    type: dict
    suboptions:
      as_number:
        description: Specify Autonomous system number.
        type: str
      address_family:
        description: Enable address family and enter its config mode.
        type: list
        elements: dict
        suboptions:
          afi:
            description: address family.
            type: str
            choices:
              - evpn
              - inet
              - inet-mdt
              - inet-mvpn
              - inet-vpn
              - inet6
              - inet6-mvpn
              - inet6-vpn
              - iso-vpn
              - l2vpn
              - route-target
              - traffic-engineering
          af_type:
            description: Address family type for ipv4.
            type: list
            elements: dict
            suboptions:
              type:
                description: Specify type of NLRI.
                type: str
                choices:
                  - any
                  - flow
                  - labeled-unicast
                  - multicast
                  - segment-routing-te
                  - unicast
                  - signaling
                  - auto-discovery-mspw
                  - auto-discovery-only
              set:
                description: Set NLRI.
                type: bool
              accepted_prefix_limit:
                description: Specify limit for maximum number of prefixes accepted from a peer.
                type: dict
                suboptions:
                  maximum:
                    description: Specify maximum number of prefixes accepted from a peer.
                    type: int
                  teardown:
                    description: Clear peer connection on reaching limit.
                    type: bool
                  limit_threshold:
                    description: Percentage of prefix-limit to start warnings.
                    type: int
                  idle_timeout:
                    description: Set idle timeout node.
                    type: bool
                  idle_timeout_value:
                    description: Specify timeout before attempting to restart peer.
                    type: int
                  forever:
                    description: Idle the peer until the user intervenes.
                    type: bool
              add_path:
                description: Advertise multiple paths to peer.
                type: dict
                suboptions:
                  receive:
                    description: Receive multiple paths from peer.
                    type: bool
                  send:
                    description: Send multiple paths to peer.
                    type: dict
                    suboptions:
                      include_backup_path:
                        description: Specify number of backup paths to advertise.
                        type: int
                      multipath:
                        description: Include only multipath contributor routes.
                        type: bool
                      path_count:
                        description: Include only multipath contributor routes.
                        type: int
                        required: true
                      path_selection_mode:
                        description: Configure how to select add-path routes.
                        type: dict
                        suboptions:
                          all_paths:
                            description: Advertise all paths allowed by path count.
                            type: bool
                          equal_cost_paths:
                            description: Advertise equal cost paths.
                            type: bool
                      prefix_policy:
                        description: Perform add-path only for prefixes that match policy.
                        type: str
              aggregate_label:
                description: Aggregate labels of incoming routes with the same FEC.
                type: dict
                suboptions:
                  set:
                    description: Set Aggregate labels of incoming routes with the same FEC
                    type: bool
                  community:
                    description: Community to identify the FEC of incoming routesC.
                    type: str
              aigp:
                description: Allow sending and receiving of AIGP attribute.
                type: dict
                suboptions:
                  set:
                    description: Set AIGP.
                    type: bool
                  disable:
                    description: Dn not allow sending and receiving of AIGP attribute.
                    type: bool
              damping:
                description: Enable route flap damping.
                type: bool
              defer_initial_multipath_build:
                description: Defer initial multipath build until EOR is received.
                type: dict
                suboptions:
                  set:
                    description: Set defer initial multipath build.
                    type: bool
                  maximum_delay:
                     description:  Max delay(sec) multipath build after peer is up.
                     type: int
              delay_route_advertisements:
                description: Delay route updates for this family until FIB-sync.
                type: dict
                suboptions:
                  set:
                    description: Set delay route advertisements.
                    type: bool
                  max_delay_route_age:
                    description: Set max delay advertisement route age.
                    type: int
                  max_delay_routing_uptime:
                    description: Set max delay advertisement route age.
                    type: int
                  min_delay_inbound_convergence:
                    description: Set min delayadvertisement after source-peer sent all routes.
                    type: int
                  min_delay_routing_uptime:
                    description: Set min delay advertisement route age.
                    type: int
              entropy_label:
                description: Use entropy label for entropy label capable BGP LSPs.
                type: dict
                suboptions:
                  set:
                    description: Set entropy-label attribute.
                    type: bool
                  import:
                    description: Policy to select BGP LSPs to use entropy label.
                    type: str
                  no_next_hop_validation:
                    description: Don't validate next hop field against route next hop.
                    type: bool
              explicit_null:
                description: Advertise explicit null.
                type: dict
                suboptions:
                  set:
                    description: Set explicit-null attribute.
                    type: bool
                  connected_only:
                    description: Advertise explicit null only for connected routes.
                    type: bool
              extended_nexthop:
                description: Enable extended nexthop encoding.
                type: bool
              extended_nexthop_color:
                description: Resolve using extended color nexthop.
                type: bool
              graceful_restart_forwarding_state_bit:
                description: Specify BGP graceful restart options.
                type: str
                choices: ['from-fib', 'set']
              local_ipv4_address:
                description: Specify local IPv4 address.
                type: str
              loops:
                description: Allow local AS in received AS paths.
                type: str
              no_install:
                description: Dont install received routes in forwarding.
                type: bool
              no_validate:
                description: Bypass validation procedure for routes that match policy.
                type: bool
              output_queue_priority_expedited:
                description: Expedited queue; highest priority.
                type: bool
              output_queue_priority_priority:
                description: Output queue priority; higher is better.
                type: int
              per_group_label:
                description: Advertise prefixes with unique labels per group.
                type: bool
              per_prefix_label:
                description: Allocate a unique label to each advertised prefix.
                type: bool
              prefix_limit:
                description: Limit maximum number of prefixes from a peer.
                type: dict
                suboptions:
                  maximum:
                    description: Specify maximum number of prefixes from a peer.
                    type: int
                  teardown:
                    description: Clear peer connection on reaching limit.
                    type: bool
                  limit_threshold:
                    description: Percentage of prefix-limit to start warnings.
                    type: int
                  idle_timeout:
                    description: Set idle timeout node.
                    type: bool
                  idle_timeout_value:
                    description: Specify timeout before attempting to restart peer.
                    type: int
                  forever:
                    description: Idle the peer until the user intervenes.
                    type: bool
              resolve_vpn:
                description: Install received NLRI in inet.3 also.
                type: bool
              rib:
                description: Select table used by labeled unicast routes.
                type: str
                choices: ['inet.3']
              ribgroup_name:
                description: Name of the routing table group.
                type: str
              route_refresh_priority_expedited:
                description: Expedited queue; highest priority.
                type: bool
              route_refresh_priority_priority:
                description: Output queue priority; higher is better.
                type: int
              secondary_independent_resolution:
                description: Resolve FLOW routes in VRF table independent of VPN FLOW route.
                type: bool
              topology:
                description: Multi topology routing tables.
                type: dict
                suboptions:
                  name:
                    description: Specify topology name.
                    type: str
                  community:
                    description: Community to identify multi topology routes.
                    type: str
              withdraw_priority_expedited:
                description: Expedited queue; highest priority.
                type: bool
              withdraw_priority_priority:
                description: Output queue priority; higher is better.
                type: int
              strip_nexthop:
                description: Strip the next-hop from the outgoing flow update.
                type: bool
  state:
    description:
      - The state the configuration should be left in.
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    - purged
    - parsed
    - gathered
    - rendered
    default: merged
"""
EXAMPLES = """









"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.junipernetworks.junos.plugins.module_utils.network.junos.argspec.bgp_address_family.bgp_address_family import Bgp_address_familyArgs
from ansible_collections.junipernetworks.junos.plugins.module_utils.network.junos.config.bgp_address_family.bgp_address_family import Bgp_address_family


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    required_if = [
        ("state", "merged", ("config",)),
        ("state", "replaced", ("config",)),
        ("state", "rendered", ("config",)),
        ("state", "parsed", ("running_config",)),
    ]
    module = AnsibleModule(
        argument_spec=Bgp_address_familyArgs.argument_spec,
        required_if=required_if,
        supports_check_mode=True,
    )
    result = Bgp_address_family(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
