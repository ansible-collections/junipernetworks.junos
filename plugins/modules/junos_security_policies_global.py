#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2022 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for junos_security_policies_global
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {"metadata_version": "1.1", "status": ["preview"], "supported_by": "network"}

DOCUMENTATION = """
---
module: junos_security_policies_global
version_added: 2.9.0
short_description: Manage global security policy settings on Juniper JUNOS devices
description: This module provides declarative management of global security policy settings on Juniper JUNOS devices
author: Pranav Bhatt (pbhatt@redhat.com)
requirements:
  - ncclient (>=v0.6.4)
  - xmltodict (>=0.12.0)
notes:
- This module requires the netconf system service be enabled on the device being managed.
- This module works with connection C(netconf). See L(the Junos OS Platform Options,https://docs.ansible.com/ansible/latest/network/user_guide/platform_junos.html).
- Tested against JunOS v18.4R1
options:
  config:
    description: A dictionary of security policies
    type: list
    elements: dict
    suboptions:
      default_policy:
        description:
          - Configure the default security policy that defines the actions the device takes on a packet that does not match any user-defined policy.
        choices:
          - deny-all
          - permit-all
        type: str
      policy_rematch:
        description:
          - Enable the device to reevaluate an active session when its associated security policy is modified. The session remains open if it still matches the policy that allowed the session initially.
        type: dict
        suboptions:
          enable:
            description:
              - Enable the device to reevaluate an active session when its associated security policy is modified. The session remains open if it still matches the policy that allowed the session initially.
            type: bool
          extensive:
            description:
              - When a policy is modified or deleted, extensive option checks if any suitable policy permit to keep these sessions alive.
            type: bool
      policy_stats:
        description:
          - Configure policies statistics.
        type: dict
        suboptions:
          enable:
            description:
              - Enable policies statistics.
            type: bool
          system_wide:
            description:
              - Configure systemwide policies statistics.
            type: bool
      pre_id_default_policy_action:
        description:
          - Configures default policy actions that occur prior to dynamic application identification (AppID) when the packet matches the criteria.
        type: dict
        suboptions:
          log:
            description:
              - Specifies the log details at session close time and session initialization time.
            choices:
              - session-init
              - session-close
            type: str
          session_timeout:
            description:
              - When you update a session, the session timeout is configured, which specifies the session timeout details in seconds.
            type: dict
            suboptions:
              icmp:
                description:
                  - Timeout value for ICMP sessions (seconds)
                type: int
              icmp6:
                description:
                  - Timeout value for ICMP6 sessions (seconds)
                type: int
              ospf:
                description:
                  - Timeout value for OSPF sessions (seconds)
                type: int
              others:
                description:
                  - Timeout value for other sessions (seconds)
                type: int
              tcp:
                description:
                  - Timeout value for TCP sessions (seconds)
                type: int
              udp:
                description:
                  - Timeout value for UDP sessions (seconds)
                type: int
      traceoptions:
        description: A dictionary of security policies
        type: dict
        suboptions:
          file:
            description: A dictionary to configure the trace file options
            type: dict
            required: true
            suboptions:
              filename:
                description: 
                  - Name of the file to receive the output of the tracing operation.
                type: str
                required: true
              files:
                description: 
                  - Maximum number of trace files
                type: int
              match:
                description: Refine the output to include lines that contain the regular expression.
                type: str
              size:
                description: The numerical value of the max file size in KB
                type: int
              world_readable:
                description: The world_readable option enables any user to read the file.
                type: bool
              no_world_readable:
                description: Log files can be accessed only by the user who configures the tracing operation.
                type: bool
          flag:
            description:
              - Trace operation to perform.
            choices:
              - all
              - configuration
              - compilation
              - ipc
              - lookup
              - routing-socket
              - rules
            type: str
          no_remote_trace:
            description: Disable remote tracing.
            type: bool
  running_config:
    description:
      - This option is used only with state I(parsed).
      - The value of this option should be the output received from the JunOS device
        by executing the command B(show security policies).
      - The state I(parsed) reads the configuration from C(running_config) option and
        transforms it into Ansible structured data as per the resource module's argspec
        and the value is then returned in the I(parsed) key within the result.
    type: str
  state:
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    - rendered
    - gathered
    - parsed
    default: merged
    description:
      - The state the configuration should be left in
      - The states I(rendered), I(gathered) and I(parsed) does not perform any change
        on the device.
      - The state I(rendered) will transform the configuration in C(config) option to
        platform specific CLI commands which will be returned in the I(rendered) key
        within the result. For state I(rendered) active connection to remote host is
        not required.
        behaviour for this module.
      - The state I(gathered) will fetch the running configuration from device and transform
        it into structured data in the format as per the resource module argspec and
        the value is returned in the I(gathered) key within the result.
      - The state I(parsed) reads the configuration from C(running_config) option and
        transforms it into JSON format as per the resource module parameters and the
        value is returned in the I(parsed) key within the result. The value of C(running_config)
        option should be the same format as the output of command
        I(show security policies detail) executed on device. For state I(parsed) active
        connection to remote host is not required.
    type: str
"""
EXAMPLES = """


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.junipernetworks.junos.plugins.module_utils.network.junos.argspec.security_policies_global.security_policies_global import (
    Security_policies_globalArgs,
)
from ansible_collections.junipernetworks.junos.plugins.module_utils.network.junos.config.security_policies_global.security_policies_global import (
    Security_policies_global,
)


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    required_if = [
        ("state", "merged", ("config",)),
        ("state", "replaced", ("config",)),
        ("state", "overridden", ("config",)),
        ("state", "rendered", ("config",)),
        ("state", "parsed", ("running_config",)),
    ]
    module = AnsibleModule(
        argument_spec=Security_policies_globalArgs.argument_spec,
        required_if=required_if,
        supports_check_mode=True,
    )

    result = Security_policies_global(module).execute_module()
    module.exit_json(**result)


if __name__ == "__main__":
    main()
