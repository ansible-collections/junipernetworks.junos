#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for junos_logging_global
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: junos_logging_global
version_added: 2.4.0
short_description: Manage logging configuration on Junos devices.
description: This module manages logging configuration on devices running Junos.
author: Rohit Thakur (@rohitthakur2590)
requirements:
  - ncclient (>=v0.6.4)
  - xmltodict (>=0.12.0)
notes:
  - This module requires the netconf system service be enabled on the device being managed.
  - This module works with connection C(netconf).
  - See L(the Junos OS Platform Options,https://docs.ansible.com/ansible/latest/network/user_guide/platform_junos.html).
  - Tested against JunOS v18.4R1
options:
  running_config:
    description:
    - This option is used only with state I(parsed).
    - The value of this option should be the output received from the Junos device
      by executing the command B(show system syslog).
    - The state I(parsed) reads the configuration from C(running_config) option and
      transforms it into Ansible structured data as per the resource module's argspec
      and the value is then returned in the I(parsed) key within the result.
    type: str
  config:
    description: A dictionary of logging configuration.
    type: dict
    suboptions:
      allow_duplicates: &allow_duplicates
        description: Do not suppress the repeated message for all targets.
        type: bool
      archive:
        description: Specify archive file information.
        type: dict
        suboptions:
          set:
            description: Set archive file information.
            type: bool
          binary_data:
            description: Mark file as if it contains binary data.
            type: bool
          files:
            description: Specify number of files to be archived (1..1000).
            type: int
          no_binary_data:
            description: Don't mark file as if it contains binary data.
            type: bool
          no_world_readable:
            description: Don't allow any user to read the log file.
            type: bool
          file_size:
            description: Size of files to be archived (65536..1073741824 bytes).
            type: int
          world_readable:
            description: Allow any user to read the log file.
            type: bool  
      console:
        description: Set console logging parameters.
        type: dict
        suboptions:
          any: &any
            description: Set All facilities.
            type: dict
            suboptions:
              level: &level
                description: Set severity logging level.
                type: str
                required: true
                choices: ["alert", "any", "critical", "emergency", "error", "info", "none", "notice", "warning"]
          authorization: &authorization
            description: Specify authorization system.
            type: dict
            suboptions:
              level: *level
          change_log: &change_log
            description: Specify configuration change log.
            type: dict
            suboptions:
              level: *level
          conflict_log: &conflict_log
            description: Specify configuration conflict log.
            type: dict
            suboptions:
              level: *level
          daemon: &daemon
            description: Specify various system processes.
            type: dict
            suboptions:
              level: *level
          dfc: &dfc
            description: Specify dynamic flow capture.
            type: dict
            suboptions:
              level: *level
          external: &external
            description: Specify Local external applications.
            type: dict
            suboptions:
              level: *level
          firewall: &firewall
            description: Specify Firewall filtering system.
            type: dict
            suboptions:
              level: *level
          ftp: &ftp
            description: Specify FTP process.
            type: dict
            suboptions:
              level: *level
          interactive_commands: &interactive_commands
            description: Specify commands executed by the UI.
            type: dict
            suboptions:
              level: *level
          kernel: &kernel
            description: Specify Kernel specific logging.
            type: dict
            suboptions:
              level: *level
          ntp: &ntp
            description: Specify NTP process specific logging.
            type: dict
            suboptions:
              level: *level
          pfe: &pfe
            description: Specify Packet Forwarding Engine specific logging.
            type: dict
            suboptions:
              level: *level
          security: &security
            description: Specify Security related logging.
            type: dict
            suboptions:
              level: *level
          user: &user
            description: Specify user specific logging.
            type: dict
            suboptions:
              level: *level
      files:
        description: Specify files logging.
        type: list
        elements: dict
        suboptions:
          name:
            description: Specify filename in which to log data.
            type: str
          allow_duplicates: *allow_duplicates
          any: *any
          archive:
            description: Specify archive file information.
            type: dict
            suboptions:
              set:
                description: Set archive file information.
                type: bool
              archive_sites:
                description: Specify Primary and failover URLs to receive archive facilities.
                type: list
                elements: str
              binary_data:
                description: Mark file as if it contains binary data.
                type: bool
              files:
                description: Specify number of files to be archived (1..1000).
                type: int
              no_binary_data:
                description: Don't mark file as if it contains binary data.
                type: bool
              no_world_readable:
                description: Don't allow any user to read the log file.
                type: bool
              file_size:
                description: Size of files to be archived (65536..1073741824 bytes).
                type: int
              start_time:
                description: Specify start time for file transmission (yyyy-mm-dd.hh:mm).
                type: str
              transfer_interval:
                description: Specify frequency at which to transfer files to archive sites (5..2880 minutes).
                type: int
              world_readable:
                description: Allow any user to read the log file.
                type: bool
          authorization: *authorization
          change_log: *change_log
          conflict_log: *conflict_log
          daemon: *daemon
          dfc: *dfc
          explicit_priority: &explicit_priority
            description: Include priority and facility in messages.
            type: bool
          external: *external
          firewall: *firewall
          ftp: *ftp
          interactive_commands: *interactive_commands
          kernel: *kernel
          match: &match
            description: Specify regular expression for lines to be logged.
            type: str
          match_strings: &match_strings
            description: Specify matching string(s) for lines to be logged.
            type: list
            elements: str
          ntp: *ntp
          pfe: *pfe
          security: *security
          structured_data: &structured_data
            description: Specify Log system message in structured format.
            type: dict
            suboptions:
              set:
                description: Set Log system message in structured format.
                type: bool
              brief:
                description: Omit English-language text from end of logged messages.
                type: bool
          user: *user   
      hosts: &hosts
        description: Specify hosts  to be notified.
        type: list
        elements: dict
        suboptions:
          name:
            description: Specify the host name.
            type: str
          allow_duplicates: *allow_duplicates
          any: *any
          authorization: *authorization
          change_log: *change_log
          conflict_log: *conflict_log
          daemon: *daemon
          dfc: *dfc
          exclude_hostname:
            description: Specify exclude hostname field in messages.
            type: bool
          explicit_priority: *explicit_priority
          external: *external
          facility_override:
            description: Specify alternate facility for logging to remote host.
            type: str
          firewall: *firewall
          ftp: *ftp
          interactive_commands: *interactive_commands
          kernel: *kernel
          log_prefix:
            description: Prefix for all logging to this host.
            type: str
          match: *match
          match_strings: *match_strings
          ntp: *ntp
          pfe: *pfe
          port:
            description: Specify port number.
            type: int
          routing_instance:
            description: Specify routing-instance.
            type: str
          security: *security
          source_address:
            description: Specify address as source address.
            type: str
          structured_data: *structured_data
          user: *user
      log_rotate_frequency:
        description: Specify Rotate log frequency (1..59 minutes).
        type: int
      routing_instance:
        description: Specify Routing routing-instance.
        type: str
      server:
        description: Specify syslog server logging.
        type: dict
        suboptions:
          set:
            description: Enable syslog server.
            type: bool
          routing_instance:
            description: nable/disable syslog server in routing-instances.
            type: dict
            suboptions:
              all:
                description: Enable/disable all routing instances.
                type: bool
              default:
                description: Enable/disable default routing instances.
                type: bool
              routing_instances:
                description: Specify routing-instances.
                type: list
                elements: dict
                suboptions:
                  name:
                    description: Specify routing-instance name.
                    type: str
                  disable:
                    description: Disable syslog server in this routing instances.
                    type: bool
      source_address:
        description: Specify address as source address.
        type: str
      time_format:
        description: Specify additional information to include in system log timestamp.
        type: dict
        suboptions:
          set:
            description: Set time-format
            type: bool
          millisecond:
            description: Include milliseconds in timestamp.
            type: bool
          year:
            description: Include year in timestamp.
            type: bool
      users:
        description: Specify user logging
        type: list
        elements: dict
        suboptions:
          name:
            description: Specify user name.
            type: str
          allow_duplicates: *allow_duplicates
          any: *any
          authorization: *authorization
          change_log: *change_log
          conflict_log: *conflict_log
          daemon: *daemon
          dfc: *dfc
          external: *external
          firewall: *firewall
          ftp: *ftp
          interactive_commands: *interactive_commands
          kernel: *kernel
          match:
            description: Specify regular expression for lines to be logged.
            type: str
          match_strings:
            description: Specify matching string(s) for lines to be logged.
            type: list
            elements: str
          ntp: *ntp
          pfe: *pfe
          security: *security
          user: *user
            
  state:
    description:
    - The state the configuration should be left in.
    - Refer to examples for more details.
    type: str
    choices:
    - merged
    - replaced
    - deleted
    - parsed
    - gathered
    - rendered
    default: merged
"""
EXAMPLES = """



"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.junipernetworks.junos.plugins.module_utils.network.junos.argspec.logging_global.logging_global import Logging_globalArgs
from ansible_collections.junipernetworks.junos.plugins.module_utils.network.junos.config.logging_global.logging_global import Logging_global


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Logging_globalArgs.argument_spec,
                           supports_check_mode=True)

    result = Logging_global(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
